package ws.astra.blockchain;

import org.testng.annotations.Test;

import java.io.IOException;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

public class HashTest {
    @Test
    public void testCtor() throws Exception {
        byte[] src = new byte[]{
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
        };
        Hash h = new Hash(src);
        assertThat(h.getValue(), equalTo(src));
    }

    @Test(expectedExceptions = IOException.class)
    public void testCtorFailsOnInvalidSource() throws Exception {
        byte[] src = {
                0x00, 0x01
        };
        new Hash(src);
    }

    @Test
    public void testGetterSetter() throws Exception {
        byte[] src = new byte[]{
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
        };
        Hash h = new Hash(src);
        byte[] test = new byte[]{
                0x10, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x18, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
        };

        h.setValue(test);
        assertThat(h.getValue(), equalTo(test));
    }

    @Test(expectedExceptions = IOException.class)
    public void testGetterSetterFailsOnInvalidData() throws Exception {
        byte[] src = new byte[]{
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
        };
        Hash h = new Hash(src);
        byte[] test = new byte[]{
                0x10, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        };

        h.setValue(test);
    }

    @Test
    public void testEquals() throws Exception {
        byte[] src = new byte[]{
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
        };

        byte[] src2 = new byte[]{
                0x10, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x18, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
        };
        Hash h = new Hash(src);

        assertThat(h.equals(h), is(true));
        assertThat(h.equals(new Object()), is(false));

        assertThat(h.equals(new Hash(src2)), is(false));
        assertThat(h.equals(new Hash(src)), is(true));

    }

}